from __future__ import annotations

import abc
import enum
from collections import defaultdict
from dataclasses import dataclass, field
from io import BytesIO
from itertools import chain, count, starmap
from pathlib import Path
from typing import (
    AbstractSet,
    Callable,
    Collection,
    Iterable,
    Mapping,
    NamedTuple,
)

import fontTools.subset
from fontTools.ttLib import TTFont as FontToolsTTF

from . import atoms
from .atoms import ASCII, sanitize_name
from .common import add_slots

FontID = bytes  # unique name assigned to a font within a PDF

Ordinal = int  # a unicode code point
_GlyphName = str  # name uniquely identifying a glyph in a TTF font
_GlyphID = int  # integer unique identifying a glyph in a TTF font
_Char = str  # 1-length string, i.e. a unicode character
GlyphPt = float  # length unit in glyph space
_OBJS_PER_EMBEDDED_FONT = 7
_CID = int  # 16-bit ID uniquely identifying a character in a PDF
_CID_MAX = 0xFFFF  # character IDs are stored as 16-bit values
TEXTSPACE_TO_GLYPHSPACE = 1000  # See PDF32000-1:2008 (9.7.3)
_CIDSYS_INFO = atoms.Dictionary(
    (b"Registry", atoms.LiteralString(b"Adobe")),
    (b"Ordering", atoms.LiteralString(b"UCS")),
    (b"Supplement", atoms.Int(0)),
)
_BUILTIN_REPLACEMENTCHAR: Ordinal = ord("?")
_EMPTY_ITERATOR = iter(())
_SUBSET_OPTIONS = fontTools.subset.Options(
    drop_tables=[
        "BASE",
        "JSTF",
        "DSIG",
        "EBDT",
        "EBLC",
        "EBSC",
        "PCLT",
        "LTSH",
        "Feat",
        "Glat",
        "Gloc",
        "Silf",
        "Sill",
        "GDEF",
        "GSUB",
        "GPOS",
        "MATH",
        "hdmx",
    ],
    notdef_outline=True,
    recommended_glyphs=True,
)


# See PDF 32000-1:2008, section 9.8.2
class FontDescriptorFlag(enum.IntFlag):
    FIXED_PITCH = 1 << 0
    SERIF = 1 << 1
    SYMBOLIC = 1 << 2
    SCRIPT = 1 << 3
    NONSYMBOLIC = 1 << 5
    ITALIC = 1 << 6
    ALL_CAP = 1 << 16
    SMALL_CAP = 1 << 17
    FORCE_BOLD = 1 << 18


class Font(abc.ABC):
    "Base class for builtin and embedded fonts"
    __slots__ = ()

    @staticmethod
    def from_path(p: Path) -> "TTF":
        return TTF(p)


@add_slots
@dataclass(frozen=True)
class TTF(Font):
    path: Path


@add_slots
@dataclass(frozen=True)
class Builtin:
    name: ASCII
    width: Callable[[Ordinal], GlyphPt] = field(repr=False)


@add_slots
@dataclass(frozen=True, repr=False)
class BuiltinFamily(Font):
    main: Builtin
    bold: Builtin | None
    oblique: Builtin | None
    bold_oblique: Builtin | None

    def __repr__(self) -> str:
        cls = type(self)
        return f"{cls.__module__}.{cls.__name__}({self.main.name.decode()})"


class IncludedFont(abc.ABC):
    """A font with extra information on how to include it in the document"""

    __slots__ = ()

    font: Font
    id: FontID

    @abc.abstractmethod
    def to_resource(self) -> atoms.Object:
        raise NotImplementedError()

    @abc.abstractmethod
    def to_atoms(self) -> Iterable[atoms.ObjectWithID]:
        raise NotImplementedError()

    @abc.abstractmethod
    def encode(self, s: str) -> bytes:
        raise NotImplementedError()

    @abc.abstractmethod
    def width(self, c: Ordinal) -> GlyphPt:
        raise NotImplementedError()


@add_slots
@dataclass(frozen=True)
class BuiltinUse(IncludedFont):
    font: BuiltinFamily
    id: FontID

    def to_resource(self) -> atoms.Object:
        return atoms.Dictionary(
            (b"Type", atoms.Name(b"Font")),
            (b"Subtype", atoms.Name(b"Type1")),
            (b"BaseFont", atoms.Name(self.font.main.name)),
            (b"Encoding", atoms.Name(b"WinAnsiEncoding")),
        )

    def to_atoms(self) -> Iterable[atoms.ObjectWithID]:
        return _EMPTY_ITERATOR

    @staticmethod
    def encode(s: str) -> bytes:
        return s.encode("cp1252", errors="replace")

    def width(self, s: Ordinal) -> GlyphPt:
        try:
            return self.font.main.width(s)
        # TODO: catching key error here is not nice
        except KeyError:
            return self.font.main.width(_BUILTIN_REPLACEMENTCHAR)


class Glyph(NamedTuple):
    id: _GlyphID
    name: _GlyphName
    width: GlyphPt


@add_slots
@dataclass(frozen=True)
class EmbeddedSubset(IncludedFont):
    id: FontID
    obj_id: atoms.ObjectID
    font: TTF
    ttf: FontToolsTTF
    default_width: GlyphPt

    # NOTE: both mappings are ordered the same
    cids: Mapping[Ordinal, _CID]
    glyphs: Mapping[Ordinal, Glyph]

    @staticmethod
    def from_chars(
        id: FontID,
        obj_id: atoms.ObjectID,
        font: TTF,
        chars: AbstractSet[_Char],
    ) -> EmbeddedSubset:
        ttf = FontToolsTTF(font.path)
        sub = fontTools.subset.Subsetter(_SUBSET_OPTIONS)
        # It's important for the CID/GID and unicode map that
        # \U0000 is included
        sub.populate(unicodes=chain(map(ord, chars), (0,)))
        sub.subset(ttf)
        cmap: dict[Ordinal, _GlyphName] | None = ttf.getBestCmap()
        assert cmap is not None, "Couldn't read font from file"
        # PDF only supports 16-bit character/glyph entries,
        # thus there is a theoretical limit to the number of unique characters
        # in a document per font. There are workarounds, but most fonts don't
        # even have this many glyphs and this many different characters
        # seem unlikely to occur in common text. Thus, we just assert.
        assert len(chars) < _CID_MAX
        gids: dict[_GlyphName, _GlyphID] = ttf.getReverseGlyphMap()
        scale = TEXTSPACE_TO_GLYPHSPACE / ttf["head"].unitsPerEm
        metrics = ttf["hmtx"].metrics
        return EmbeddedSubset(
            id,
            obj_id,
            font,
            ttf,
            # TODO: what font metrics do we pick?
            round(scale * metrics[".notdef"][0]),
            # NOTE: we rely on continuously incrementing CIDs elsewhere!
            dict(zip(cmap, count())),
            {
                o: Glyph(gids[g], g, scale * metrics[g][0])
                for o, g in cmap.items()
            },
        )

    def encode(self, s: str) -> bytes:
        return s.translate(self.cids).encode(
            "utf-16be", errors="surrogatepass"
        )

    def to_resource(self) -> atoms.Object:
        return atoms.Ref(self.obj_id)

    def to_atoms(self) -> Iterable[atoms.ObjectWithID]:
        scale = TEXTSPACE_TO_GLYPHSPACE / self.ttf["head"].unitsPerEm
        # According to PDF32000-1:2008 (9.6.4) font subsets
        # need to begin with an arbitrary six-letter tag.
        # The tag should be the same per font subset added by a PDF writer.
        # We choose `PDFJE` padded with an `A` at the front.
        tagged_name = atoms.Name(
            b"APDFJE+"
            + sanitize_name(self.ttf["name"].getBestFullName().encode())
        )

        (
            descendant_id,
            unicodemap_id,
            cidsysinfo_id,
            descriptor_id,
            cid_gid_map_id,
            file_id,
        ) = range(self.obj_id + 1, self.obj_id + _OBJS_PER_EMBEDDED_FONT)
        # These objects are based on PDF32000-1:2008, page 293
        yield (
            self.obj_id,
            atoms.Dictionary(
                (b"Type", atoms.Name(b"Font")),
                (b"Subtype", atoms.Name(b"Type0")),
                (b"BaseFont", tagged_name),
                (b"Encoding", atoms.Name(b"Identity-H")),
                (
                    b"DescendantFonts",
                    atoms.Array((atoms.Ref(descendant_id),)),
                ),
                (b"ToUnicode", atoms.Ref(unicodemap_id)),
            ),
        )
        yield (
            descendant_id,
            atoms.Dictionary(
                (b"Type", atoms.Name(b"Font")),
                (b"Subtype", atoms.Name(b"CIDFontType2")),
                (b"BaseFont", tagged_name),
                (b"CIDSystemInfo", atoms.Ref(cidsysinfo_id)),
                (b"FontDescriptor", atoms.Ref(descriptor_id)),
                (
                    b"DW",
                    atoms.Int(
                        round(scale * self.ttf["hmtx"].metrics[".notdef"][0])
                    ),
                ),
                (b"W", _encode_widths(self.ttf, scale)),
                (b"CIDToGIDMap", atoms.Ref(cid_gid_map_id)),
            ),
        )
        yield (unicodemap_id, _to_unicode_map(self.cids.items()))
        yield (cidsysinfo_id, _CIDSYS_INFO)
        yield (
            descriptor_id,
            atoms.Dictionary(
                (b"Type", atoms.Name(b"FontDescriptor")),
                (b"FontName", tagged_name),
                (b"Flags", _encode_flags(self.ttf)),
                (b"FontBBox", _encode_bbox(self.ttf, scale)),
                (
                    b"ItalicAngle",
                    atoms.Int(round(self.ttf["post"].italicAngle)),
                ),
                (
                    b"Ascent",
                    atoms.Int(round(self.ttf["hhea"].ascent * scale)),
                ),
                (
                    b"Descent",
                    atoms.Int(round(self.ttf["hhea"].descent * scale)),
                ),
                (b"CapHeight", _encode_cap_height(self.ttf, scale)),
                (b"StemV", _encode_stem_v(self.ttf)),
                (b"FontFile2", atoms.Ref(file_id)),
            ),
        )
        yield (
            cid_gid_map_id,
            _encode_cid_gid_map(map(self.glyphs.__getitem__, self.cids)),
        )
        yield (file_id, _encode_ttf_with_side_effects(self.ttf))

    def width(self, s: Ordinal) -> GlyphPt:
        try:
            return self.glyphs[s].width
        # TODO: cathing KeyError here is not nice
        except KeyError:
            return self.default_width


def _encode_bbox(f: FontToolsTTF, scale: float) -> atoms.Array:
    head = f["head"]
    return atoms.Array(
        atoms.Int(round(v * scale))
        for v in (head.xMin, head.yMin, head.xMax, head.yMax)
    )


def _encode_flags(f: FontToolsTTF) -> atoms.Int:
    return atoms.Int(
        FontDescriptorFlag.SYMBOLIC
        | (f["post"].isFixedPitch and FontDescriptorFlag.FIXED_PITCH)
        | (bool(f["post"].italicAngle) and FontDescriptorFlag.ITALIC)
        | (f["OS/2"].usWeightClass >= 600 and FontDescriptorFlag.FORCE_BOLD)
    )


# WARNING: the act of saving fontTools' TTFont leads to changed properties
# such as ttfont['head'].xMin. Beware of when you call this function!
def _encode_ttf_with_side_effects(f: FontToolsTTF) -> atoms.Stream:
    tmp = BytesIO()
    f.save(tmp)
    content = tmp.getvalue()
    return atoms.Stream(content, ((b"Length1", atoms.Int(len(content))),))


# NOTE: the given glyphs must be ordered by continuously ascending CID value
# from 0 onwards
def _encode_cid_gid_map(glyphs: Iterable[Glyph]) -> atoms.Stream:
    # See PDF32000-1:2008 (table 117) for instructions on how to encode this
    return atoms.Stream(b"".join(g.id.to_bytes(2, "big") for g in glyphs))


def _encode_widths(f: FontToolsTTF, scale: float) -> atoms.Array:
    # See PDF32000-1:2008 (9.7.4.3) for how character widths are encoded.
    # For now we choose to simply encode all widths sequentially.
    # It should be made more efficient in the future,
    # especially for fixed width fonts.
    return atoms.Array(
        (
            atoms.Int(0),
            atoms.Array(
                atoms.Int(round(scale * f["hmtx"].metrics[g][0]))
                for g in f.getBestCmap().values()
            ),
        )
    )


def _encode_cap_height(f: FontToolsTTF, scale: float) -> atoms.Int:
    # Apparently not all TTF fonts properly have the capheight accessible.
    # We can fall back to the ascender height, which is usually slightly lower.
    try:
        v = f["OS/2"].sCapHeight
    except AttributeError:
        v = f["hhea"].ascent

    return atoms.Int(round(v * scale))


_FONTWEIGHT_TO_STEM_V_RATIO = (241 - 50) / (900 - 100)


def _encode_stem_v(f: FontToolsTTF) -> atoms.Int:
    # See stackoverflow.com/questions/35485179.
    # The StemV value cannot be directly retrieved from TTF type fonts.
    # Common wisdom seems to be to map the font weight (100-900) to reasonable
    # StemV values (50-241).
    return atoms.Int(
        round(50 + _FONTWEIGHT_TO_STEM_V_RATIO * f["OS/2"].usWeightClass)
    )


def _to_unicode_map(m: Collection[tuple[Ordinal, _CID]]) -> atoms.Stream:
    # The 'To Unicode' map ensures that the correct characters are copied
    # from a text selection.
    return atoms.Stream(
        _TO_UNICODE_CMAP
        % (
            b"".join(_CIDSYS_INFO.write()),
            len(m),
            b"\n".join(
                b"<%04X> <%b>" % (cid, utf16be_hex(code)) for code, cid in m
            ),
        )
    )


def utf16be_hex(c: Ordinal) -> bytes:
    if c <= 0xFFFF:
        return b"%04X" % c
    else:
        return b"%04X%04X" % (
            (c - 0x10000) >> 10 | 0xD800,
            (c & 0x3FF) | 0xDC00,
        )


def usage(
    text: Iterable[tuple[str, Font]], first_id: atoms.ObjectID
) -> Iterable[IncludedFont]:
    next_name = map(b"F%i".__mod__, count()).__next__
    next_id = count(first_id, _OBJS_PER_EMBEDDED_FONT).__next__
    embeds: defaultdict[
        TTF, tuple[FontID, atoms.ObjectID, set[_Char]]
    ] = defaultdict(lambda: (next_name(), next_id(), set()))
    builtins: defaultdict[BuiltinFamily, FontID] = defaultdict(next_name)

    for content, font in text:
        if isinstance(font, BuiltinFamily):
            builtins[font]
        else:
            assert isinstance(font, TTF)
            embeds[font][2].update(content)

    return chain(
        starmap(BuiltinUse, builtins.items()),
        (
            EmbeddedSubset.from_chars(name, id, font, chars)
            for font, (name, id, chars) in embeds.items()
        ),
    )


# based on PDF32000-1:2008, page 294
_TO_UNICODE_CMAP = b"""\
/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
%b def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000> <FFFF>
endcodespacerange
%i beginbfchar
%b
endbfchar
endcmap
CMapName currentdict /CMap defineresource pop
end
end"""


helvetica = BuiltinFamily(
    Builtin(
        b"Helvetica",
        {
            32: 278,
            33: 278,
            34: 355,
            35: 556,
            36: 556,
            37: 889,
            38: 667,
            39: 191,
            40: 333,
            41: 333,
            42: 389,
            43: 584,
            44: 278,
            45: 333,
            46: 278,
            47: 278,
            48: 556,
            49: 556,
            50: 556,
            51: 556,
            52: 556,
            53: 556,
            54: 556,
            55: 556,
            56: 556,
            57: 556,
            58: 278,
            59: 278,
            60: 584,
            61: 584,
            62: 584,
            63: 556,
            64: 1015,
            65: 667,
            66: 667,
            67: 722,
            68: 722,
            69: 667,
            70: 611,
            71: 778,
            72: 722,
            73: 278,
            74: 500,
            75: 667,
            76: 556,
            77: 833,
            78: 722,
            79: 778,
            80: 667,
            81: 778,
            82: 722,
            83: 667,
            84: 611,
            85: 722,
            86: 667,
            87: 944,
            88: 667,
            89: 667,
            90: 611,
            91: 278,
            92: 278,
            93: 278,
            94: 469,
            95: 556,
            96: 333,
            97: 556,
            98: 556,
            99: 500,
            100: 556,
            101: 556,
            102: 278,
            103: 556,
            104: 556,
            105: 222,
            106: 222,
            107: 500,
            108: 222,
            109: 833,
            110: 556,
            111: 556,
            112: 556,
            113: 556,
            114: 333,
            115: 500,
            116: 278,
            117: 556,
            118: 500,
            119: 722,
            120: 500,
            121: 500,
            122: 500,
            123: 334,
            124: 260,
            125: 334,
            126: 584,
            161: 333,
            162: 556,
            163: 556,
            164: 556,
            165: 556,
            166: 260,
            167: 556,
            169: 737,
            170: 370,
            171: 556,
            172: 584,
            174: 737,
            176: 400,
            177: 584,
            178: 333,
            179: 333,
            182: 537,
            183: 278,
            185: 333,
            186: 365,
            187: 556,
            188: 834,
            189: 834,
            190: 834,
            191: 611,
            192: 667,
            193: 667,
            194: 667,
            195: 667,
            196: 667,
            197: 667,
            198: 1000,
            199: 722,
            200: 667,
            201: 667,
            202: 667,
            203: 667,
            204: 278,
            205: 278,
            206: 278,
            207: 278,
            208: 722,
            209: 722,
            210: 778,
            211: 778,
            212: 778,
            213: 778,
            214: 778,
            215: 584,
            216: 778,
            217: 722,
            218: 722,
            219: 722,
            220: 722,
            221: 667,
            222: 667,
            223: 611,
            224: 556,
            225: 556,
            226: 556,
            227: 556,
            228: 556,
            229: 556,
            230: 889,
            231: 500,
            232: 556,
            233: 556,
            234: 556,
            235: 556,
            236: 278,
            237: 278,
            238: 278,
            239: 278,
            240: 556,
            241: 556,
            242: 556,
            243: 556,
            244: 556,
            245: 556,
            246: 556,
            247: 584,
            248: 611,
            249: 556,
            250: 556,
            251: 556,
            252: 556,
            253: 500,
            254: 556,
            255: 500,
            305: 278,
            321: 556,
            322: 222,
            338: 1000,
            339: 944,
            352: 667,
            353: 500,
            376: 667,
            381: 611,
            382: 500,
            402: 556,
            710: 333,
            711: 333,
            769: 333,
            771: 333,
            772: 333,
            774: 333,
            775: 333,
            776: 333,
            778: 333,
            779: 333,
            807: 333,
            808: 333,
            956: 556,
            8211: 556,
            8212: 1000,
            8216: 222,
            8217: 222,
            8218: 222,
            8220: 333,
            8221: 333,
            8222: 333,
            8224: 556,
            8225: 556,
            8226: 350,
            8230: 1000,
            8240: 1000,
            8249: 333,
            8250: 333,
            8260: 167,
            8364: 556,
            8482: 1000,
            8722: 584,
            64257: 500,
            64258: 500,
        }.__getitem__,
    ),
    Builtin(
        b"Helvetica-Bold",
        {
            32: 278,
            33: 333,
            34: 474,
            35: 556,
            36: 556,
            37: 889,
            38: 722,
            39: 238,
            40: 333,
            41: 333,
            42: 389,
            43: 584,
            44: 278,
            45: 333,
            46: 278,
            47: 278,
            48: 556,
            49: 556,
            50: 556,
            51: 556,
            52: 556,
            53: 556,
            54: 556,
            55: 556,
            56: 556,
            57: 556,
            58: 333,
            59: 333,
            60: 584,
            61: 584,
            62: 584,
            63: 611,
            64: 975,
            65: 722,
            66: 722,
            67: 722,
            68: 722,
            69: 667,
            70: 611,
            71: 778,
            72: 722,
            73: 278,
            74: 556,
            75: 722,
            76: 611,
            77: 833,
            78: 722,
            79: 778,
            80: 667,
            81: 778,
            82: 722,
            83: 667,
            84: 611,
            85: 722,
            86: 667,
            87: 944,
            88: 667,
            89: 667,
            90: 611,
            91: 333,
            92: 278,
            93: 333,
            94: 584,
            95: 556,
            96: 333,
            97: 556,
            98: 611,
            99: 556,
            100: 611,
            101: 556,
            102: 333,
            103: 611,
            104: 611,
            105: 278,
            106: 278,
            107: 556,
            108: 278,
            109: 889,
            110: 611,
            111: 611,
            112: 611,
            113: 611,
            114: 389,
            115: 556,
            116: 333,
            117: 611,
            118: 556,
            119: 778,
            120: 556,
            121: 556,
            122: 500,
            123: 389,
            124: 280,
            125: 389,
            126: 584,
            161: 333,
            162: 556,
            163: 556,
            164: 556,
            165: 556,
            166: 280,
            167: 556,
            169: 737,
            170: 370,
            171: 556,
            172: 584,
            174: 737,
            176: 400,
            177: 584,
            178: 333,
            179: 333,
            182: 556,
            183: 278,
            185: 333,
            186: 365,
            187: 556,
            188: 834,
            189: 834,
            190: 834,
            191: 611,
            192: 722,
            193: 722,
            194: 722,
            195: 722,
            196: 722,
            197: 722,
            198: 1000,
            199: 722,
            200: 667,
            201: 667,
            202: 667,
            203: 667,
            204: 278,
            205: 278,
            206: 278,
            207: 278,
            208: 722,
            209: 722,
            210: 778,
            211: 778,
            212: 778,
            213: 778,
            214: 778,
            215: 584,
            216: 778,
            217: 722,
            218: 722,
            219: 722,
            220: 722,
            221: 667,
            222: 667,
            223: 611,
            224: 556,
            225: 556,
            226: 556,
            227: 556,
            228: 556,
            229: 556,
            230: 889,
            231: 556,
            232: 556,
            233: 556,
            234: 556,
            235: 556,
            236: 278,
            237: 278,
            238: 278,
            239: 278,
            240: 611,
            241: 611,
            242: 611,
            243: 611,
            244: 611,
            245: 611,
            246: 611,
            247: 584,
            248: 611,
            249: 611,
            250: 611,
            251: 611,
            252: 611,
            253: 556,
            254: 611,
            255: 556,
            305: 278,
            321: 611,
            322: 278,
            338: 1000,
            339: 944,
            352: 667,
            353: 556,
            376: 667,
            381: 611,
            382: 500,
            402: 556,
            710: 333,
            711: 333,
            769: 333,
            771: 333,
            772: 333,
            774: 333,
            775: 333,
            776: 333,
            778: 333,
            779: 333,
            807: 333,
            808: 333,
            956: 611,
            8211: 556,
            8212: 1000,
            8216: 278,
            8217: 278,
            8218: 278,
            8220: 500,
            8221: 500,
            8222: 500,
            8224: 556,
            8225: 556,
            8226: 350,
            8230: 1000,
            8240: 1000,
            8249: 333,
            8250: 333,
            8260: 167,
            8364: 556,
            8482: 1000,
            8722: 584,
            64257: 611,
            64258: 611,
        }.__getitem__,
    ),
    Builtin(
        b"Helvetica-Oblique",
        {
            32: 278,
            33: 278,
            34: 355,
            35: 556,
            36: 556,
            37: 889,
            38: 667,
            39: 191,
            40: 333,
            41: 333,
            42: 389,
            43: 584,
            44: 278,
            45: 333,
            46: 278,
            47: 278,
            48: 556,
            49: 556,
            50: 556,
            51: 556,
            52: 556,
            53: 556,
            54: 556,
            55: 556,
            56: 556,
            57: 556,
            58: 278,
            59: 278,
            60: 584,
            61: 584,
            62: 584,
            63: 556,
            64: 1015,
            65: 667,
            66: 667,
            67: 722,
            68: 722,
            69: 667,
            70: 611,
            71: 778,
            72: 722,
            73: 278,
            74: 500,
            75: 667,
            76: 556,
            77: 833,
            78: 722,
            79: 778,
            80: 667,
            81: 778,
            82: 722,
            83: 667,
            84: 611,
            85: 722,
            86: 667,
            87: 944,
            88: 667,
            89: 667,
            90: 611,
            91: 278,
            92: 278,
            93: 278,
            94: 469,
            95: 556,
            96: 333,
            97: 556,
            98: 556,
            99: 500,
            100: 556,
            101: 556,
            102: 278,
            103: 556,
            104: 556,
            105: 222,
            106: 222,
            107: 500,
            108: 222,
            109: 833,
            110: 556,
            111: 556,
            112: 556,
            113: 556,
            114: 333,
            115: 500,
            116: 278,
            117: 556,
            118: 500,
            119: 722,
            120: 500,
            121: 500,
            122: 500,
            123: 334,
            124: 260,
            125: 334,
            126: 584,
            161: 333,
            162: 556,
            163: 556,
            164: 556,
            165: 556,
            166: 260,
            167: 556,
            169: 737,
            170: 370,
            171: 556,
            172: 584,
            174: 737,
            176: 400,
            177: 584,
            178: 333,
            179: 333,
            182: 537,
            183: 278,
            185: 333,
            186: 365,
            187: 556,
            188: 834,
            189: 834,
            190: 834,
            191: 611,
            192: 667,
            193: 667,
            194: 667,
            195: 667,
            196: 667,
            197: 667,
            198: 1000,
            199: 722,
            200: 667,
            201: 667,
            202: 667,
            203: 667,
            204: 278,
            205: 278,
            206: 278,
            207: 278,
            208: 722,
            209: 722,
            210: 778,
            211: 778,
            212: 778,
            213: 778,
            214: 778,
            215: 584,
            216: 778,
            217: 722,
            218: 722,
            219: 722,
            220: 722,
            221: 667,
            222: 667,
            223: 611,
            224: 556,
            225: 556,
            226: 556,
            227: 556,
            228: 556,
            229: 556,
            230: 889,
            231: 500,
            232: 556,
            233: 556,
            234: 556,
            235: 556,
            236: 278,
            237: 278,
            238: 278,
            239: 278,
            240: 556,
            241: 556,
            242: 556,
            243: 556,
            244: 556,
            245: 556,
            246: 556,
            247: 584,
            248: 611,
            249: 556,
            250: 556,
            251: 556,
            252: 556,
            253: 500,
            254: 556,
            255: 500,
            305: 278,
            321: 556,
            322: 222,
            338: 1000,
            339: 944,
            352: 667,
            353: 500,
            376: 667,
            381: 611,
            382: 500,
            402: 556,
            710: 333,
            711: 333,
            769: 333,
            771: 333,
            772: 333,
            774: 333,
            775: 333,
            776: 333,
            778: 333,
            779: 333,
            807: 333,
            808: 333,
            956: 556,
            8211: 556,
            8212: 1000,
            8216: 222,
            8217: 222,
            8218: 222,
            8220: 333,
            8221: 333,
            8222: 333,
            8224: 556,
            8225: 556,
            8226: 350,
            8230: 1000,
            8240: 1000,
            8249: 333,
            8250: 333,
            8260: 167,
            8364: 556,
            8482: 1000,
            8722: 584,
            64257: 500,
            64258: 500,
        }.__getitem__,
    ),
    Builtin(
        b"Helvetica-BoldOblique",
        {
            32: 278,
            33: 333,
            34: 474,
            35: 556,
            36: 556,
            37: 889,
            38: 722,
            39: 238,
            40: 333,
            41: 333,
            42: 389,
            43: 584,
            44: 278,
            45: 333,
            46: 278,
            47: 278,
            48: 556,
            49: 556,
            50: 556,
            51: 556,
            52: 556,
            53: 556,
            54: 556,
            55: 556,
            56: 556,
            57: 556,
            58: 333,
            59: 333,
            60: 584,
            61: 584,
            62: 584,
            63: 611,
            64: 975,
            65: 722,
            66: 722,
            67: 722,
            68: 722,
            69: 667,
            70: 611,
            71: 778,
            72: 722,
            73: 278,
            74: 556,
            75: 722,
            76: 611,
            77: 833,
            78: 722,
            79: 778,
            80: 667,
            81: 778,
            82: 722,
            83: 667,
            84: 611,
            85: 722,
            86: 667,
            87: 944,
            88: 667,
            89: 667,
            90: 611,
            91: 333,
            92: 278,
            93: 333,
            94: 584,
            95: 556,
            96: 333,
            97: 556,
            98: 611,
            99: 556,
            100: 611,
            101: 556,
            102: 333,
            103: 611,
            104: 611,
            105: 278,
            106: 278,
            107: 556,
            108: 278,
            109: 889,
            110: 611,
            111: 611,
            112: 611,
            113: 611,
            114: 389,
            115: 556,
            116: 333,
            117: 611,
            118: 556,
            119: 778,
            120: 556,
            121: 556,
            122: 500,
            123: 389,
            124: 280,
            125: 389,
            126: 584,
            161: 333,
            162: 556,
            163: 556,
            164: 556,
            165: 556,
            166: 280,
            167: 556,
            169: 737,
            170: 370,
            171: 556,
            172: 584,
            174: 737,
            176: 400,
            177: 584,
            178: 333,
            179: 333,
            182: 556,
            183: 278,
            185: 333,
            186: 365,
            187: 556,
            188: 834,
            189: 834,
            190: 834,
            191: 611,
            192: 722,
            193: 722,
            194: 722,
            195: 722,
            196: 722,
            197: 722,
            198: 1000,
            199: 722,
            200: 667,
            201: 667,
            202: 667,
            203: 667,
            204: 278,
            205: 278,
            206: 278,
            207: 278,
            208: 722,
            209: 722,
            210: 778,
            211: 778,
            212: 778,
            213: 778,
            214: 778,
            215: 584,
            216: 778,
            217: 722,
            218: 722,
            219: 722,
            220: 722,
            221: 667,
            222: 667,
            223: 611,
            224: 556,
            225: 556,
            226: 556,
            227: 556,
            228: 556,
            229: 556,
            230: 889,
            231: 556,
            232: 556,
            233: 556,
            234: 556,
            235: 556,
            236: 278,
            237: 278,
            238: 278,
            239: 278,
            240: 611,
            241: 611,
            242: 611,
            243: 611,
            244: 611,
            245: 611,
            246: 611,
            247: 584,
            248: 611,
            249: 611,
            250: 611,
            251: 611,
            252: 611,
            253: 556,
            254: 611,
            255: 556,
            305: 278,
            321: 611,
            322: 278,
            338: 1000,
            339: 944,
            352: 667,
            353: 556,
            376: 667,
            381: 611,
            382: 500,
            402: 556,
            710: 333,
            711: 333,
            769: 333,
            771: 333,
            772: 333,
            774: 333,
            775: 333,
            776: 333,
            778: 333,
            779: 333,
            807: 333,
            808: 333,
            956: 611,
            8211: 556,
            8212: 1000,
            8216: 278,
            8217: 278,
            8218: 278,
            8220: 500,
            8221: 500,
            8222: 500,
            8224: 556,
            8225: 556,
            8226: 350,
            8230: 1000,
            8240: 1000,
            8249: 333,
            8250: 333,
            8260: 167,
            8364: 556,
            8482: 1000,
            8722: 584,
            64257: 611,
            64258: 611,
        }.__getitem__,
    ),
)
times_roman = BuiltinFamily(
    Builtin(
        b"Times-Roman",
        {
            32: 250,
            33: 333,
            34: 408,
            35: 500,
            36: 500,
            37: 833,
            38: 778,
            39: 180,
            40: 333,
            41: 333,
            42: 500,
            43: 564,
            44: 250,
            45: 333,
            46: 250,
            47: 278,
            48: 500,
            49: 500,
            50: 500,
            51: 500,
            52: 500,
            53: 500,
            54: 500,
            55: 500,
            56: 500,
            57: 500,
            58: 278,
            59: 278,
            60: 564,
            61: 564,
            62: 564,
            63: 444,
            64: 921,
            65: 722,
            66: 667,
            67: 667,
            68: 722,
            69: 611,
            70: 556,
            71: 722,
            72: 722,
            73: 333,
            74: 389,
            75: 722,
            76: 611,
            77: 889,
            78: 722,
            79: 722,
            80: 556,
            81: 722,
            82: 667,
            83: 556,
            84: 611,
            85: 722,
            86: 722,
            87: 944,
            88: 722,
            89: 722,
            90: 611,
            91: 333,
            92: 278,
            93: 333,
            94: 469,
            95: 500,
            96: 333,
            97: 444,
            98: 500,
            99: 444,
            100: 500,
            101: 444,
            102: 333,
            103: 500,
            104: 500,
            105: 278,
            106: 278,
            107: 500,
            108: 278,
            109: 778,
            110: 500,
            111: 500,
            112: 500,
            113: 500,
            114: 333,
            115: 389,
            116: 278,
            117: 500,
            118: 500,
            119: 722,
            120: 500,
            121: 500,
            122: 444,
            123: 480,
            124: 200,
            125: 480,
            126: 541,
            161: 333,
            162: 500,
            163: 500,
            164: 500,
            165: 500,
            166: 200,
            167: 500,
            169: 760,
            170: 276,
            171: 500,
            172: 564,
            174: 760,
            176: 400,
            177: 564,
            178: 300,
            179: 300,
            182: 453,
            183: 250,
            185: 300,
            186: 310,
            187: 500,
            188: 750,
            189: 750,
            190: 750,
            191: 444,
            192: 722,
            193: 722,
            194: 722,
            195: 722,
            196: 722,
            197: 722,
            198: 889,
            199: 667,
            200: 611,
            201: 611,
            202: 611,
            203: 611,
            204: 333,
            205: 333,
            206: 333,
            207: 333,
            208: 722,
            209: 722,
            210: 722,
            211: 722,
            212: 722,
            213: 722,
            214: 722,
            215: 564,
            216: 722,
            217: 722,
            218: 722,
            219: 722,
            220: 722,
            221: 722,
            222: 556,
            223: 500,
            224: 444,
            225: 444,
            226: 444,
            227: 444,
            228: 444,
            229: 444,
            230: 667,
            231: 444,
            232: 444,
            233: 444,
            234: 444,
            235: 444,
            236: 278,
            237: 278,
            238: 278,
            239: 278,
            240: 500,
            241: 500,
            242: 500,
            243: 500,
            244: 500,
            245: 500,
            246: 500,
            247: 564,
            248: 500,
            249: 500,
            250: 500,
            251: 500,
            252: 500,
            253: 500,
            254: 500,
            255: 500,
            305: 278,
            321: 611,
            322: 278,
            338: 889,
            339: 722,
            352: 556,
            353: 389,
            376: 722,
            381: 611,
            382: 444,
            402: 500,
            710: 333,
            711: 333,
            769: 333,
            771: 333,
            772: 333,
            774: 333,
            775: 333,
            776: 333,
            778: 333,
            779: 333,
            807: 333,
            808: 333,
            956: 500,
            8211: 500,
            8212: 1000,
            8216: 333,
            8217: 333,
            8218: 333,
            8220: 444,
            8221: 444,
            8222: 444,
            8224: 500,
            8225: 500,
            8226: 350,
            8230: 1000,
            8240: 1000,
            8249: 333,
            8250: 333,
            8260: 167,
            8364: 500,
            8482: 980,
            8722: 564,
            64257: 556,
            64258: 556,
        }.__getitem__,
    ),
    Builtin(
        b"Times-Bold",
        {
            32: 250,
            33: 333,
            34: 555,
            35: 500,
            36: 500,
            37: 1000,
            38: 833,
            39: 278,
            40: 333,
            41: 333,
            42: 500,
            43: 570,
            44: 250,
            45: 333,
            46: 250,
            47: 278,
            48: 500,
            49: 500,
            50: 500,
            51: 500,
            52: 500,
            53: 500,
            54: 500,
            55: 500,
            56: 500,
            57: 500,
            58: 333,
            59: 333,
            60: 570,
            61: 570,
            62: 570,
            63: 500,
            64: 930,
            65: 722,
            66: 667,
            67: 722,
            68: 722,
            69: 667,
            70: 611,
            71: 778,
            72: 778,
            73: 389,
            74: 500,
            75: 778,
            76: 667,
            77: 944,
            78: 722,
            79: 778,
            80: 611,
            81: 778,
            82: 722,
            83: 556,
            84: 667,
            85: 722,
            86: 722,
            87: 1000,
            88: 722,
            89: 722,
            90: 667,
            91: 333,
            92: 278,
            93: 333,
            94: 581,
            95: 500,
            96: 333,
            97: 500,
            98: 556,
            99: 444,
            100: 556,
            101: 444,
            102: 333,
            103: 500,
            104: 556,
            105: 278,
            106: 333,
            107: 556,
            108: 278,
            109: 833,
            110: 556,
            111: 500,
            112: 556,
            113: 556,
            114: 444,
            115: 389,
            116: 333,
            117: 556,
            118: 500,
            119: 722,
            120: 500,
            121: 500,
            122: 444,
            123: 394,
            124: 220,
            125: 394,
            126: 520,
            161: 333,
            162: 500,
            163: 500,
            164: 500,
            165: 500,
            166: 220,
            167: 500,
            169: 747,
            170: 300,
            171: 500,
            172: 570,
            174: 747,
            176: 400,
            177: 570,
            178: 300,
            179: 300,
            182: 540,
            183: 250,
            185: 300,
            186: 330,
            187: 500,
            188: 750,
            189: 750,
            190: 750,
            191: 500,
            192: 722,
            193: 722,
            194: 722,
            195: 722,
            196: 722,
            197: 722,
            198: 1000,
            199: 722,
            200: 667,
            201: 667,
            202: 667,
            203: 667,
            204: 389,
            205: 389,
            206: 389,
            207: 389,
            208: 722,
            209: 722,
            210: 778,
            211: 778,
            212: 778,
            213: 778,
            214: 778,
            215: 570,
            216: 778,
            217: 722,
            218: 722,
            219: 722,
            220: 722,
            221: 722,
            222: 611,
            223: 556,
            224: 500,
            225: 500,
            226: 500,
            227: 500,
            228: 500,
            229: 500,
            230: 722,
            231: 444,
            232: 444,
            233: 444,
            234: 444,
            235: 444,
            236: 278,
            237: 278,
            238: 278,
            239: 278,
            240: 500,
            241: 556,
            242: 500,
            243: 500,
            244: 500,
            245: 500,
            246: 500,
            247: 570,
            248: 500,
            249: 556,
            250: 556,
            251: 556,
            252: 556,
            253: 500,
            254: 556,
            255: 500,
            305: 278,
            321: 667,
            322: 278,
            338: 1000,
            339: 722,
            352: 556,
            353: 389,
            376: 722,
            381: 667,
            382: 444,
            402: 500,
            710: 333,
            711: 333,
            769: 333,
            771: 333,
            772: 333,
            774: 333,
            775: 333,
            776: 333,
            778: 333,
            779: 333,
            807: 333,
            808: 333,
            956: 556,
            8211: 500,
            8212: 1000,
            8216: 333,
            8217: 333,
            8218: 333,
            8220: 500,
            8221: 500,
            8222: 500,
            8224: 500,
            8225: 500,
            8226: 350,
            8230: 1000,
            8240: 1000,
            8249: 333,
            8250: 333,
            8260: 167,
            8364: 500,
            8482: 1000,
            8722: 570,
            64257: 556,
            64258: 556,
        }.__getitem__,
    ),
    Builtin(
        b"Times-Italic",
        {
            32: 250,
            33: 333,
            34: 420,
            35: 500,
            36: 500,
            37: 833,
            38: 778,
            39: 214,
            40: 333,
            41: 333,
            42: 500,
            43: 675,
            44: 250,
            45: 333,
            46: 250,
            47: 278,
            48: 500,
            49: 500,
            50: 500,
            51: 500,
            52: 500,
            53: 500,
            54: 500,
            55: 500,
            56: 500,
            57: 500,
            58: 333,
            59: 333,
            60: 675,
            61: 675,
            62: 675,
            63: 500,
            64: 920,
            65: 611,
            66: 611,
            67: 667,
            68: 722,
            69: 611,
            70: 611,
            71: 722,
            72: 722,
            73: 333,
            74: 444,
            75: 667,
            76: 556,
            77: 833,
            78: 667,
            79: 722,
            80: 611,
            81: 722,
            82: 611,
            83: 500,
            84: 556,
            85: 722,
            86: 611,
            87: 833,
            88: 611,
            89: 556,
            90: 556,
            91: 389,
            92: 278,
            93: 389,
            94: 422,
            95: 500,
            96: 333,
            97: 500,
            98: 500,
            99: 444,
            100: 500,
            101: 444,
            102: 278,
            103: 500,
            104: 500,
            105: 278,
            106: 278,
            107: 444,
            108: 278,
            109: 722,
            110: 500,
            111: 500,
            112: 500,
            113: 500,
            114: 389,
            115: 389,
            116: 278,
            117: 500,
            118: 444,
            119: 667,
            120: 444,
            121: 444,
            122: 389,
            123: 400,
            124: 275,
            125: 400,
            126: 541,
            161: 389,
            162: 500,
            163: 500,
            164: 500,
            165: 500,
            166: 275,
            167: 500,
            169: 760,
            170: 276,
            171: 500,
            172: 675,
            174: 760,
            176: 400,
            177: 675,
            178: 300,
            179: 300,
            182: 523,
            183: 250,
            185: 300,
            186: 310,
            187: 500,
            188: 750,
            189: 750,
            190: 750,
            191: 500,
            192: 611,
            193: 611,
            194: 611,
            195: 611,
            196: 611,
            197: 611,
            198: 889,
            199: 667,
            200: 611,
            201: 611,
            202: 611,
            203: 611,
            204: 333,
            205: 333,
            206: 333,
            207: 333,
            208: 722,
            209: 667,
            210: 722,
            211: 722,
            212: 722,
            213: 722,
            214: 722,
            215: 675,
            216: 722,
            217: 722,
            218: 722,
            219: 722,
            220: 722,
            221: 556,
            222: 611,
            223: 500,
            224: 500,
            225: 500,
            226: 500,
            227: 500,
            228: 500,
            229: 500,
            230: 667,
            231: 444,
            232: 444,
            233: 444,
            234: 444,
            235: 444,
            236: 278,
            237: 278,
            238: 278,
            239: 278,
            240: 500,
            241: 500,
            242: 500,
            243: 500,
            244: 500,
            245: 500,
            246: 500,
            247: 675,
            248: 500,
            249: 500,
            250: 500,
            251: 500,
            252: 500,
            253: 444,
            254: 500,
            255: 444,
            305: 278,
            321: 556,
            322: 278,
            338: 944,
            339: 667,
            352: 500,
            353: 389,
            376: 556,
            381: 556,
            382: 389,
            402: 500,
            710: 333,
            711: 333,
            769: 333,
            771: 333,
            772: 333,
            774: 333,
            775: 333,
            776: 333,
            778: 333,
            779: 333,
            807: 333,
            808: 333,
            956: 500,
            8211: 500,
            8212: 889,
            8216: 333,
            8217: 333,
            8218: 333,
            8220: 556,
            8221: 556,
            8222: 556,
            8224: 500,
            8225: 500,
            8226: 350,
            8230: 889,
            8240: 1000,
            8249: 333,
            8250: 333,
            8260: 167,
            8364: 500,
            8482: 980,
            8722: 675,
            64257: 500,
            64258: 500,
        }.__getitem__,
    ),
    Builtin(
        b"Times-BoldItalic",
        {
            32: 250,
            33: 389,
            34: 555,
            35: 500,
            36: 500,
            37: 833,
            38: 778,
            39: 278,
            40: 333,
            41: 333,
            42: 500,
            43: 570,
            44: 250,
            45: 333,
            46: 250,
            47: 278,
            48: 500,
            49: 500,
            50: 500,
            51: 500,
            52: 500,
            53: 500,
            54: 500,
            55: 500,
            56: 500,
            57: 500,
            58: 333,
            59: 333,
            60: 570,
            61: 570,
            62: 570,
            63: 500,
            64: 832,
            65: 667,
            66: 667,
            67: 667,
            68: 722,
            69: 667,
            70: 667,
            71: 722,
            72: 778,
            73: 389,
            74: 500,
            75: 667,
            76: 611,
            77: 889,
            78: 722,
            79: 722,
            80: 611,
            81: 722,
            82: 667,
            83: 556,
            84: 611,
            85: 722,
            86: 667,
            87: 889,
            88: 667,
            89: 611,
            90: 611,
            91: 333,
            92: 278,
            93: 333,
            94: 570,
            95: 500,
            96: 333,
            97: 500,
            98: 500,
            99: 444,
            100: 500,
            101: 444,
            102: 333,
            103: 500,
            104: 556,
            105: 278,
            106: 278,
            107: 500,
            108: 278,
            109: 778,
            110: 556,
            111: 500,
            112: 500,
            113: 500,
            114: 389,
            115: 389,
            116: 278,
            117: 556,
            118: 444,
            119: 667,
            120: 500,
            121: 444,
            122: 389,
            123: 348,
            124: 220,
            125: 348,
            126: 570,
            161: 389,
            162: 500,
            163: 500,
            164: 500,
            165: 500,
            166: 220,
            167: 500,
            169: 747,
            170: 266,
            171: 500,
            172: 606,
            174: 747,
            176: 400,
            177: 570,
            178: 300,
            179: 300,
            182: 500,
            183: 250,
            185: 300,
            186: 300,
            187: 500,
            188: 750,
            189: 750,
            190: 750,
            191: 500,
            192: 667,
            193: 667,
            194: 667,
            195: 667,
            196: 667,
            197: 667,
            198: 944,
            199: 667,
            200: 667,
            201: 667,
            202: 667,
            203: 667,
            204: 389,
            205: 389,
            206: 389,
            207: 389,
            208: 722,
            209: 722,
            210: 722,
            211: 722,
            212: 722,
            213: 722,
            214: 722,
            215: 570,
            216: 722,
            217: 722,
            218: 722,
            219: 722,
            220: 722,
            221: 611,
            222: 611,
            223: 500,
            224: 500,
            225: 500,
            226: 500,
            227: 500,
            228: 500,
            229: 500,
            230: 722,
            231: 444,
            232: 444,
            233: 444,
            234: 444,
            235: 444,
            236: 278,
            237: 278,
            238: 278,
            239: 278,
            240: 500,
            241: 556,
            242: 500,
            243: 500,
            244: 500,
            245: 500,
            246: 500,
            247: 570,
            248: 500,
            249: 556,
            250: 556,
            251: 556,
            252: 556,
            253: 444,
            254: 500,
            255: 444,
            305: 278,
            321: 611,
            322: 278,
            338: 944,
            339: 722,
            352: 556,
            353: 389,
            376: 611,
            381: 611,
            382: 389,
            402: 500,
            710: 333,
            711: 333,
            769: 333,
            771: 333,
            772: 333,
            774: 333,
            775: 333,
            776: 333,
            778: 333,
            779: 333,
            807: 333,
            808: 333,
            956: 576,
            8211: 500,
            8212: 1000,
            8216: 333,
            8217: 333,
            8218: 333,
            8220: 500,
            8221: 500,
            8222: 500,
            8224: 500,
            8225: 500,
            8226: 350,
            8230: 1000,
            8240: 1000,
            8249: 333,
            8250: 333,
            8260: 167,
            8364: 500,
            8482: 1000,
            8722: 606,
            64257: 556,
            64258: 556,
        }.__getitem__,
    ),
)
courier = BuiltinFamily(
    Builtin(b"Courier", lambda _: 600),
    Builtin(b"Courier-Bold", lambda _: 600),
    Builtin(b"Courier-Oblique", lambda _: 600),
    Builtin(b"Courier-BoldOblique", lambda _: 600),
)

# TODO: actual widths
symbol = BuiltinFamily(Builtin(b"Symbol", lambda _: 1000), None, None, None)
zapf_dingbats = BuiltinFamily(
    Builtin(b"ZapfDingbats", lambda _: 1000), None, None, None
)
